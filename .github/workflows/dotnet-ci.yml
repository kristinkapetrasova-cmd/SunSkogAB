name: .NET CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # ⬇⬇⬇ NOVÝ KROK – cache NuGetu (musí být před "Restore")
      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-
      # ⬆⬆⬆

      - name: Restore
        run: |
          dotnet restore SunSkog.Api/SunSkog.Api.csproj
          dotnet restore SunSkog.Api.Tests/SunSkog.Api.Tests.csproj

      - name: Build (API + Tests)
        run: |
          dotnet build SunSkog.Api/SunSkog.Api.csproj -c Release --no-restore
          dotnet build SunSkog.Api.Tests/SunSkog.Api.Tests.csproj -c Release --no-restore

      - name: Test (s coverage)
        run: dotnet test SunSkog.Api.Tests/SunSkog.Api.Tests.csproj -c Release --no-build --collect:"XPlat Code Coverage" --logger "trx;LogFileName=test-results.trx"

      # Volitelné: ladění cest k coverage
      - name: Debug – najdi coverage soubory
        if: always()
        run: |
          echo "Hledám coverage.cobertura.xml:"
          find . -name "coverage.cobertura.xml" || true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: SunSkog.Api.Tests/TestResults

      - name: Upload coverage (Cobertura)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: SunSkog.Api.Tests/TestResults/**/coverage.cobertura.xml

      - name: Create Coverage Summary (Markdown)
        if: always()
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: 'SunSkog.Api.Tests/TestResults/**/coverage.cobertura.xml'
          format: 'markdown'
          badge: true
          output: 'file'           # vytvoří code-coverage-results.md v pracovním adresáři
          thresholds: '60 80'

      - name: Append coverage to job summary
        if: always()
        run: |
          if [ -f "code-coverage-results.md" ]; then
            cat code-coverage-results.md >> "$GITHUB_STEP_SUMMARY"
          else
            echo "Coverage summary file nebyl vytvořen (pravděpodobně se nenašel žádný coverage.cobertura.xml). Zkontroluj log kroku 'Create Coverage Summary' a krok 'Debug – najdi coverage soubory'." >> "$GITHUB_STEP_SUMMARY"
          fi
